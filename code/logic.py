from telebot import TeleBot, types 
import sqlite3
from config import *
import os
import time
import random
from datetime import datetime, timedelta

bot = TeleBot(token)

class DB_Manager:
    def __init__(self, database):
        self.database = database
        self.conn = sqlite3.connect(self.database, check_same_thread=False)
    
        self.animals = {
            "üêá –ó–∞—è—Ü": 5,
            "ü¶ä –õ–∏—Å–∞": 8,
            "ü¶å –ö–æ—Å—É–ª—è": 10,
            "üê∫ –í–æ–ª–∫": 15,
            "üêó –ö–∞–±–∞–Ω": 20,
            "üêª –ú–µ–¥–≤–µ–¥—å": 30
                        }
        
        self.results = {animal: 0 for animal in self.animals}

    def create_tables(self):
        with self.conn:
            self.conn.execute("""CREATE TABLE IF NOT EXISTS users(
                             id INTEGER PRIMARY KEY,
                             username TEXT,
                             user_id TEXT UNIQUE,
                             food INTEGER DEFAULT 0,
                             gold INTEGER DEFAULT 0,
                             wood INTEGER DEFAULT 0,
                             stone INTEGER DEFAULT 0,
                             story INTEGER DEFAULT 0,
                             last_hunt_time REAL DEFAULT 0,
                             house_lvl INTEGER DEFAULT 0)
                             """)
            self.conn.execute("""CREATE TABLE IF NOT EXISTS house(
                              id INTEGER PRIMARY KEY,
                              level INTEGER,
                              gold_cost INTEGER,
                              wood_cost INTEGER,
                              stone_cost INTEGER)""")
            
    def insert_houses(self):
       houses = [
          (1, 1, 2, 10, 8),
          (2, 2, 5, 20, 15),
          (3, 3, 10, 40, 30),
          (4, 4, 20, 100, 80),
          (5, 5, 40, 200, 180)]
       with self.conn:
          cur = self.conn.cursor()
          cur.executemany("""INSERT OR IGNORE INTO house (id, level, gold_cost, wood_cost, stone_cost) VALUES (?, ?, ?, ?, ?)""", houses)
       
    def select_user(self, message):
       user_id = message.chat.id
       with self.conn:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM USERS WHERE user_id = ?", (user_id,))
        user = cur.fetchone()
       return user

    def start(self, message):
        user_id = message.chat.id
        username = message.from_user.username or "Anonymous"
        with self.conn:
           cur = self.conn.cursor()
           cur.execute("SELECT * FROM USERS WHERE user_id = ?", (user_id,))
           user = cur.fetchone()
           
           if user is None:
              food = 0
              gold = 0
              wood = 0
              stone = 0
              story = 0
              house_lvl = 0
              cur.execute('''INSERT INTO users (user_id, username, food, gold, wood, stone, story, house_lvl) VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', (user_id, username, food, gold, wood, stone, story, house_lvl))
              bot.send_message(user_id, "–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –î–º–∏—Ç—Ä–∏–µ–º –ì–æ—Ä—Å–∫–∏–º –∏ –†–æ–¥–∏–æ–Ω–æ–º –ö—É–Ω–¥—è–Ω–æ–∫")
              video_path = "C:\\Users\\Admin\\OneDrive\\Desktop\\simulator\\images\\vstuplenie.mp4"
              bot.send_message(user_id, "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
              bot.send_chat_action(user_id, "upload_video")
            
              time.sleep(1.5)
    
              if os.path.exists(video_path):
               with open(video_path, "rb") as f:
                bot.send_video(user_id, f, timeout=120)
              else:
               bot.send_message(user_id, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–æ—Ä–æ—á–µ –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è :(") 
        
              time.sleep(2)
            
           elif user is not None:
              pass

    def story_0(self, message):
       user_id = message.chat.id
       user = self.select_user(message)
       markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
       markup.add("–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ö–æ—Ç–∞")
       bot.send_message(user_id, """*–ë–æ–≥:* –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Å—ã–Ω –º–æ–π –±–æ–∂–∏–π. –¢—ã –æ–¥–∏–Ω –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∂–∏—Ç—å —ç—Ç–æ –Ω–µ—Å—á–∞—Å—Ç—å–µ.""", parse_mode="Markdown")
       time.sleep(2.5)
       bot.send_message(user_id,"""*–ë–æ–≥:* –ù—É —á—Ç–æ-–∂–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–≥—Ä–∞–∂—É –∫–∞ —è —Ç–µ–±—è –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –Ω—É–∂–¥–∞–µ—à—å—Å—è, –¥–µ—Ä–∂–∏ 10 –∫—É—Å–æ—á–∫–æ–≤ –∑–æ–ª–æ—Ç–∞üèÖ, 20 –∫—É—Å–∫–æ–≤ –¥–µ—Ä–µ–≤–∞ü™µ –∏ 20 –∫–∞–º–Ω–µ–πü™®, —Å –Ω–∏–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–º""", parse_mode="Markdown") 
       time.sleep(2)
       with self.conn:
          cur = self.conn.cursor()
          cur.execute("""
            UPDATE users SET gold = gold + 10, wood = wood + 20, stone = stone + 20, story = 1 
            WHERE user_id = ?
        """, (user_id,))    
       bot.send_message(user_id, "<i>–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ: </i> +20üèÖ, +20ü™µ, +20ü™®", parse_mode="HTML")  
      
       bot.send_message(user_id, """*–ë–æ–≥:* –°–∫–æ—Ä–æ —Ç—ã –ø–æ—Å—Ç—Ä–æ–∏—à—å —Å–µ–±–µ –Ω–æ–≤—ã–π –¥–æ–º, –Ω–æ —Å–Ω–∞—á–∞–ª–∞, –∏–¥–∏ –∫–∞ —Ç—ã –Ω–∞ –æ—Ö–æ—Ç—É, —Ç—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–π, —Ç–µ–±–µ —Å—Ç–æ–∏–ª–æ –±—ã –ø–æ–µ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–∞–∂–º–∏ –≤ –º–µ–Ω—é –Ω–∞ –∫–Ω–æ–ø–∫—É *–û—Ö–æ—Ç–∞*, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å –µ–¥—ã""", parse_mode="Markdown", reply_markup=markup)
       
    def hunt(self, message):
       user = self.select_user(message)
       user_id = message.chat.id
       now = time.time()
       cooldown = 60   
          
       cur = self.conn.cursor()
       cur.execute("SELECT last_hunt_time FROM users WHERE user_id = ?", (user_id,))
       result = cur.fetchone()
       last_hunt = result[0] if result else 0
       now = time.time()

       if now - last_hunt < cooldown:
          remaining = int(cooldown - (now - last_hunt))
          bot.send_message(user_id, f"üïë –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ö–æ—Ç–æ–π.")
          return
       
       
       bot.send_message(user_id, "üèπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –æ—Ö–æ—Ç—É...")
        
       results = {animal: 0 for animal in self.animals}
       total_points = 0

       for i in range(5):
            time.sleep(1)  
            if random.random() < 0.3:
                bot.send_message(user_id, f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–Ω–æ.")
                continue

           
            choices = []
            for animal, points in self.animals.items():
                weight = max(1, 40 - points)
                choices.extend([animal] * weight)

            caught = random.choice(choices)
            results[caught] += 1
            total_points += self.animals[caught]
            bot.send_message(user_id, f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ü–æ–π–º–∞–Ω {caught} (+{self.animals[caught]} –æ—á–∫–æ–≤)")

       
       msg = "<i>üìä –í–∞—à–∞ –¥–æ–±—ã—á–∞:</i>\n"
       for animal, count in results.items():
            if count > 0:
                msg += f"{animal}: {count} —à—Ç.\n"

       msg += f"\n<i>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</i> {total_points} üèÜ"

       bot.send_message(user_id, msg, parse_mode="HTML")

       markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
       markup.add("–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ö–æ—Ç–∞", "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º")
       self.conn.execute("UPDATE users SET food = food + ?, last_hunt_time = ? WHERE user_id = ?", (total_points, now, user_id))
       if user[7] == 1: 
        time.sleep(2)
        if total_points < 20:
           bot.send_message(user_id, """*–ë–æ–≥:* –ú–¥–∞... –ù–µ –æ—á–µ–Ω—å –∫–æ–Ω–µ—á–Ω–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ö–æ—Ç–∞ –≤—ã—à–ª–∞, –Ω–æ –Ω–∏—á–µ–≥–æ, –ï—â—ë –Ω–∞—É—á–∏—à—Å—è. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —Ç–≤–æ–µ–≥–æ –¥–æ–º–∞.""", parse_mode="Markdown")
        else:
           bot.send_message(user_id, """*–ë–æ–≥:* –•–æ—Ä–æ—à–∞—è –æ—Ö–æ—Ç–∞, —Å—ã–Ω –º–æ–π. –¢—ã –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –≤—ã–∂–∏—Ç—å. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —Ç–≤–æ–µ–≥–æ –¥–æ–º–∞.""", parse_mode="Markdown")
       
        time.sleep(2)
        self.conn.execute("UPDATE users SET story = 2 WHERE user_id = ?", (user_id,))
        bot.send_message(user_id, """*–ë–æ–≥:* –ü–æ—Å—Ç—Ä–æ–π —Å–µ–±–µ –¥–æ–º. –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è 2üèÖ 10ü™µ –∏ 8ü™®. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º* –≤ –º–µ–Ω—é""", parse_mode="Markdown", reply_markup=markup)

    def house(self, message):
        user_id = message.chat.id
        with self.conn:
          cur = self.conn.cursor()
          cur.execute('''SELECT u.gold, u.wood, u.stone, u.house_lvl,  u.story,
                      h.gold_cost, h.wood_cost, h.stone_cost FROM users u
                      INNER JOIN house h ON u.house_lvl + 1 = h.level
                      WHERE u.user_id = ?
                    ''', (user_id,))
          data = cur.fetchone()       
          if data:
           gold, wood, stone, house_lvl, story, gold_cost, wood_cost, stone_cost = data

           if gold < gold_cost or wood < wood_cost or stone < stone_cost:
            bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–º–∞!")
            return

           cur.execute("""
           UPDATE users
           SET gold = gold - ?, wood = wood - ?, stone = stone - ?, house_lvl = house_lvl + 1
           WHERE user_id = ?
           """, (gold_cost, wood_cost, stone_cost, user_id))

           bot.send_message(user_id, f"üéâ –í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –¥–æ–º —É—Ä–æ–≤–Ω—è {house_lvl + 1}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: üèÖ {gold - gold_cost}, ü™µ {wood - wood_cost}, ü™® {stone - stone_cost}")
           house_photo = f"C:\\Users\\Admin\\OneDrive\\Desktop\\simulator\\images\\lvl{house_lvl + 1}.jpg"
           if os.path.exists(house_photo):
               with open(house_photo, "rb") as f:
                  bot.send_photo(user_id, f)
                  if story == 2:
                     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                     markup.add("–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ö–æ—Ç–∞", "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ")
                     bot.send_message(user_id, "*–ë–æ–≥: *–ù—É —á—Ç–æ–∂, —Å—ã–Ω –º–æ–π –±–æ–∂–∏–π, –≤–æ—Ç —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–º, —Å–∫—Ä–æ–º–Ω–æ–≤–∞—Ç—ã–π, –Ω–æ –∂–∏—Ç—å –º–æ–∂–Ω–æ, –ø–æ—Ç–æ–º –ª—É—á—à–µ —Å–¥–µ–ª–∞–µ—à—å. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–æ–±—ã—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–∂–∏–≤–∞—Ç—å. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–æ —É—á—Ç–∏, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –≥–æ–ª–æ–¥–Ω—ã–π –∂–µ–ª—É–¥–æ–∫!", parse_mode="Markdown", reply_markup=markup)
                     cur.execute("""UPDATE users
                                    SET story = 3""")
                 
          else:
           bot.send_message(user_id, "üèöÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
           

    def adventure(self, message):
     with self.conn:
        cur = self.conn.cursor()
        user_id = message.chat.id
        player_hp = 6
        user = self.select_user(message)

        if user[7] < 3:
            bot.send_message(user_id, "–¢—ã –µ—â—ë –Ω–µ –º–æ–∂–µ—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.")
            return

        if user[3] < 20:
            bot.send_message(user_id, f"–¢—ã –≥–æ–ª–æ–¥–Ω—ã–π, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 –µ–¥–∏–Ω–∏—Ü üçñ, –∞ —É —Ç–µ–±—è –∏—Ö {user[3]}")
            return

        events = ["Zombie", "Wood", "Stone"]
        killed_zombies = 0
        extracted_gold = 0
        extracted_wood = 0
        extracted_stone = 0

        if user[7] >= 3:
            event_list = ["Zombie", "Wood", "Stone"]
        else:
            foundings = random.randint(2, 5)
            event_list = [random.choice(events) for _ in range(foundings)]
        
        for event in event_list:
            if player_hp <= 0:
                break

            if event == "Zombie":
                zombie_hp = random.randint(2, 6)
                zombie_hp_start = zombie_hp
                letters = ["A", "B", "C", "D", "E", "F"]
                target_letter = ""

                bot.send_message(user_id, "–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –∑–æ–º–±–∏üßü‚Äç‚ôÇ, –∑–∞—â–∏—à–∞–π—Ç–µ—Å—å!")

                if user[7] == 3:
                    bot.send_message(user_id, "–ü–∏—à–∏ –±—É–∫–≤—É (*–Ω–∞ –ª–∞—Ç—ã–Ω–∏*), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∞. –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —É—Ä–æ–Ω –∑–æ–º–±–∏, –∏–Ω–∞—á–µ ‚Äî —É—Ä–æ–Ω —Ç–µ–±–µ.", parse_mode="Markdown")
                    time.sleep(3)
                    bot.send_message(user_id, "–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º:")
        
                def new_letter():
                  nonlocal zombie_hp, player_hp, target_letter
                  target_letter = random.choice(letters)
                  bot.send_message(user_id, f"üëâ –ù–∞–ø–∏—à–∏ –±—É–∫–≤—É: {target_letter}")
                  bot.register_next_step_handler(message, fight_step)
                

                def fight_step(message):
                  nonlocal zombie_hp, player_hp, target_letter, killed_zombies, extracted_gold
                  answer = message.text.strip().upper()

                  if answer == target_letter:
                    zombie_hp -= 1
                    percent = round(zombie_hp / zombie_hp_start * 100) if zombie_hp > 0 else 0
                    bot.send_message(user_id, f"‚úÖ –ë–∞–º! –£ –∑–æ–º–±–∏ –æ—Å—Ç–∞–ª–æ—Å—å {percent}% HP.")
                    if zombie_hp  or player_hp <= 0: 
                      new_letter()
                  else:
                   player_hp -= 1
                   percent = round(player_hp / 6 * 100) if player_hp > 0 else 0
                   bot.send_message(user_id, f"‚ùå –ê–π! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {percent}% HP.")
                   if zombie_hp  or player_hp <= 0: 
                      new_letter()
                   if zombie_hp <= 0:
                    gold = zombie_hp_start // 2
                    bot.send_message(user_id, f"üèÜ –ü–æ–±–µ–¥–∞! –¢—ã –ø–æ–ª—É—á–∏–ª {gold} –∫—É—Å–æ—á–∫–æ–≤ –∑–æ–ª–æ—Ç–∞.")
                    extracted_gold += gold
                    killed_zombies += 1 
                   elif player_hp <= 0:
                    bot.send_message(user_id, "üíÄ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ó–æ–º–±–∏ –ø—Ä–æ–∫—É—Å–∏–ª —Ç–≤–æ–∏ –¥–æ—Å–ø–µ—Ö–∏.")
                    time.sleep(2)
                   if user[7] == 3:
                    cur.execute(""" UPDATE users SET story = 4 WHERE user_id = ? """,(user_id,))
                    bot.send_message(user_id, "*–ë–æ–≥: * –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –ø–æ–±–µ–¥–∏–ª –∑–æ–º–±–∏. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ...", parse_mode="Markdown")
                  

                
                  
                if player_hp > 0 and zombie_hp > 0:
                    pass

                if player_hp <= 0:
                    break  

                else:
                   new_letter()
            elif event == "Wood":
                wood_gained = random.randint(2, 7)
                if user[3] == 3:
                   bot.send_message(user_id, f"–ï—Å–ª–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –¥–µ—Ä–µ–≤–æ, —Ç—ã –ø–æ–ª–∏—á—à—å —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–≤.")
                bot.send_message(user_id, f"–¢—ã –¥–æ–±—ã–ª {wood_gained} {'–∫—É—Å–∫–∞' if wood_gained < 5 else '–∫—É—Å–∫–æ–≤'} –¥–µ—Ä–µ–≤–∞ üå≤.")
                extracted_wood += wood_gained

            elif event == "Stone":
                stone_gained = random.randint(2, 5)
                if user[3] == 3:
                   bot.send_message(user_id, f"–ï—Å–ª–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –∫–∞–º–µ–Ω—å, —Ç–æ –∫–∞–∫ –∏ —Å –¥–µ—Ä–µ–≤–æ–º —Ç—ã –ø–æ–ª–∏—á—à—å —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤ –∫–∞–º–Ω—èü™®.")
                bot.send_message(user_id, f"–¢—ã –Ω–∞—à—ë–ª {stone_gained} {'–∫—É—Å–æ—á–∫–∞ ' if wood_gained < 5 else '–∫—É—Å–∫–æ–≤ '} –∫–∞–º–Ω–µ–π ü™®.")
                extracted_stone += stone_gained

            time.sleep(2)

      
        cur.execute("""
            UPDATE users
            SET gold = gold + ?, wood = wood + ?, stone = stone + ?, food = food - 20
            WHERE user_id = ?
        """, (extracted_gold, extracted_wood, extracted_stone, user_id))

        summary = (
            f"üåç –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ!\n"
            f"üßü –£–±–∏—Ç–æ –∑–æ–º–±–∏: {killed_zombies}\n"
            f"üèÖ –ù–∞–π–¥–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {extracted_gold}\n"
            f"üå≤ –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ä–µ–≤–∞: {extracted_wood}\n"
            f"ü™® –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–Ω—è: {extracted_stone}\n"
            f"üçñ -20 –µ–¥—ã"
        )
        bot.send_message(user_id, summary)
        
        if user[7] == 3:
           time.sleep(2)
           cur.execute("""
            UPDATE users
            SET story = 4
            WHERE user_id = ?
        """, (user_id,))

           bot.send_message(user_id, "*–ë–æ–≥: * –•–æ—Ä–æ—à–µ–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∏–Ω!\n–¢—ã —Å—Ä–∞–∂–∞–ª—Å—è –¥–æ—Å—Ç–æ–π–Ω–æ –∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å –¥–æ–±—ã—á–µ–π. –Ø –æ—Å—Ç–∞–≤–ª—é —Ç–µ–±—è –Ω–∞ –≤—Ä–µ–º—è, –∏–¥–∏ –Ω–∞ –æ—Ö–æ—Ç—É, —Å—Ç—Ä–æ–π –¥–æ–º–∞ –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è, –ø–æ—Ç–æ–º —É–≤–∏–¥–∏—à—å –∫–∞–∫ —Å—É–¥—å–±–∞ —Å —Ç–æ–±–æ–π –ø–æ–∏–≥—Ä–∞–µ—Ç...", parse_mode="Markdown")
        
        
   # Next step funktion!!!!!!!!