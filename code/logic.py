from telebot import TeleBot, types 
import sqlite3
from config import *
import os
import time
import random
from datetime import datetime, timedelta

bot = TeleBot(token)

class DB_Manager:
    def __init__(self, database):
        self.database = database
        self.conn = sqlite3.connect(self.database, check_same_thread=False)
    
        self.animals = {
            "üêá –ó–∞—è—Ü": 5,
            "ü¶ä –õ–∏—Å–∞": 8,
            "ü¶å –ö–æ—Å—É–ª—è": 10,
            "üê∫ –í–æ–ª–∫": 15,
            "üêó –ö–∞–±–∞–Ω": 20,
            "üêª –ú–µ–¥–≤–µ–¥—å": 30
                        }
        
        self.results = {animal: 0 for animal in self.animals}

    def create_tables(self):
        with self.conn:
            self.conn.execute("""CREATE TABLE IF NOT EXISTS users(
                             id INTEGER PRIMARY KEY,
                             username TEXT,
                             user_id TEXT UNIQUE,
                             food INTEGER DEFAULT 0,
                             gold INTEGER DEFAULT 0,
                             wood INTEGER DEFAULT 0,
                             stone INTEGER DEFAULT 0,
                             story INTEGER DEFAULT 0,
                             last_hunt_time REAL DEFAULT 0)
                             """)
    def select_user(self, message):
       user_id = message.chat.id
       with self.conn:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM USERS WHERE user_id = ?", (user_id,))
        user = cur.fetchone()
       return user

    def start(self, message):
        user_id = message.chat.id
        username = message.from_user.username or "Anonymous"
        with self.conn:
           cur = self.conn.cursor()
           cur.execute("SELECT * FROM USERS WHERE user_id = ?", (user_id,))
           user = cur.fetchone()
           
           if user is None:
              food = 0
              gold = 0
              wood = 0
              stone = 0
              story = 0
              cur.execute('''INSERT INTO users (user_id, username, food, gold, wood, stone, story) VALUES (?, ?, ?, ?, ?, ?, ?)''', (user_id, username, food, gold, wood, stone, story))
              bot.send_message(user_id, "–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –î–º–∏—Ç—Ä–∏–µ–º –ì–æ—Ä—Å–∫–∏–º –∏ –†–æ–¥–∏–æ–Ω–æ–º –ö—É–Ω–¥—è–Ω–æ–∫")
              video_path = "C:\\Users\\Admin\\OneDrive\\Desktop\\simulator\\images\\vstuplenie.mp4"
              bot.send_message(user_id, "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
              bot.send_chat_action(user_id, "upload_video")
            
              time.sleep(1.5)
    
              if os.path.exists(video_path):
               with open(video_path, "rb") as f:
                bot.send_video(user_id, f, timeout=120)
              else:
               bot.send_message(user_id, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–æ—Ä–æ—á–µ –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è :(") 
        
              time.sleep(2)
            
           elif user is not None:
              pass

    def story_0(self, message):
       user_id = message.chat.id
       user = self.select_user(message)
       bot.send_message(user_id, """*–ë–æ–≥:* –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Å—ã–Ω –º–æ–π –±–æ–∂–∏–π. –¢—ã –æ–¥–∏–Ω –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∂–∏—Ç—å —ç—Ç–æ –Ω–µ—Å—á–∞—Å—Ç—å–µ.""", parse_mode="Markdown")
       time.sleep(2.5)
       bot.send_message(user_id,"""*–ë–æ–≥:* –ù—É —á—Ç–æ-–∂–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–≥—Ä–∞–∂—É –∫–∞ —è —Ç–µ–±—è –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –Ω—É–∂–¥–∞–µ—à—å—Å—è, –¥–µ—Ä–∂–∏ 10 –∫—É—Å–æ—á–∫–æ–≤ –∑–æ–ª–æ—Ç–∞üèÖ, 20 –∫—É—Å–∫–æ–≤ –¥–µ—Ä–µ–≤–∞ü™µ –∏ 20 –∫–∞–º–Ω–µ–πü™®, —Å –Ω–∏–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–º""", parse_mode="Markdown") 
       time.sleep(2)
       with self.conn:
          cur = self.conn.cursor()
          cur.execute("""
            UPDATE users SET gold = gold + 10, wood = wood + 20, stone = stone + 20, story = 1 
            WHERE user_id = ?
        """, (user_id,))    
       bot.send_message(user_id, "<i>–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ:</i> +20üèÖ, +20ü™µ, +20ü™®", parse_mode="HTML")  
      
       bot.send_message(user_id, """*–ë–æ–≥:* –°–∫–æ—Ä–æ —Ç—ã –ø–æ—Å—Ç—Ä–æ–∏—à—å —Å–µ–±–µ –Ω–æ–≤—ã–π –¥–æ–º, –Ω–æ —Å–Ω–∞—á–∞–ª–∞, –∏–¥–∏ –∫–∞ —Ç—ã –Ω–∞ –æ—Ö–æ—Ç—É, —Ç—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–π, —Ç–µ–±–µ —Å—Ç–æ–∏–ª–æ –±—ã –ø–æ–µ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–∞–∂–º–∏ –≤ –º–µ–Ω—é –Ω–∞ –∫–Ω–æ–ø–∫—É *–û—Ö–æ—Ç–∞*, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å –µ–¥—ã""", parse_mode="Markdown")
       
    def hunt(self, message):
       user = self.select_user(message)
       user_id = message.chat.id
       now = time.time()
       cooldown = 60   
          
       cur = self.conn.cursor()
       cur.execute("SELECT last_hunt_time FROM users WHERE user_id = ?", (user_id,))
       result = cur.fetchone()
       last_hunt = result[0] if result else 0
       now = time.time()

       if now - last_hunt < cooldown:
          remaining = int(cooldown - (now - last_hunt))
          bot.send_message(user_id, f"üïë –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ö–æ—Ç–æ–π.")
          return
       
       
       bot.send_message(user_id, "üèπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –æ—Ö–æ—Ç—É...")
        
       results = {animal: 0 for animal in self.animals}
       total_points = 0

       for i in range(5):
            time.sleep(1)  
            if random.random() < 0.3:
                bot.send_message(user_id, f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–Ω–æ.")
                continue

           
            choices = []
            for animal, points in self.animals.items():
                weight = max(1, 40 - points)
                choices.extend([animal] * weight)

            caught = random.choice(choices)
            results[caught] += 1
            total_points += self.animals[caught]
            bot.send_message(user_id, f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ü–æ–π–º–∞–Ω {caught} (+{self.animals[caught]} –æ—á–∫–æ–≤)")

       
       msg = "<i>üìä –í–∞—à–∞ –¥–æ–±—ã—á–∞:</i>\n"
       for animal, count in results.items():
            if count > 0:
                msg += f"{animal}: {count} —à—Ç.\n"

       msg += f"\n<i>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</i> {total_points} üèÜ"

       bot.send_message(user_id, msg, parse_mode="HTML")

       with self.conn:
        self.conn.execute("UPDATE users SET food = food + ?, last hunt_time = ? WHERE user_id = ?", (total_points, now, user_id))
       if user[6] == 1: 
        self.conn.execute("UPDATE users SET food = food + ?, last hunt_time = ? WHERE user_id = ?", (total_points, now, user_id))
        time.sleep(2)
        bot.send_message(user_id, """*–ë–æ–≥:* –•–æ—Ä–æ—à–∞—è –æ—Ö–æ—Ç–∞, —Å—ã–Ω –º–æ–π. –¢—ã –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –≤—ã–∂–∏—Ç—å. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ.""", parse_mode="Markdown")
        time.sleep(2)
        bot.send_message(user_id, """*–ë–æ–≥:* –ü–æ—Å—Ç—Ä–æ–π —Å–µ–±–µ –¥–æ–º. –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è 10ü™µ –∏ 8ü™®. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º*""", parse_mode="Markdown")

        #–í–æ—Ç –¥–∞–ª—å—à–µ –ø–∏—à—É
    
    
    
       # Ich soll den Markdown Ohota erstellen und dort  2 bis 5 Tiere jagen,
       # jedes Tier gibt mir bestimmte Anzahl an Punkten die dann alle 
       # zusammen summiert werden ---> noch eine Tabelle erstellen (Zweri)
       #Er soll ungef√§hr so aussehen:
       #Ihre Beute:
       # () Krolikov
       # () Volkov
       # () Kasul
       # ...
       # Ich soll au√üerdem ein cooldown f√ºr die Jagd erstellen
       # Ich muss den Gottes Text an die richtigen Zeilen setzen
       # Profil soll auch angezeigt werden
       

             

              

                

